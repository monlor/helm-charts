# 纯数字需要打引号！！！
# 全局配置中的中间件配置可以配外部服务
global:
  repository: 
  storageClassName: 

# 资源类型 Deployment、StatefulSet 或 DaemonSet
resourceType: Deployment

# 端口，健康检查默认端口
# port: 80
# extraPort:
#   - port: 8080
#     protocol: TCP
# 节点数
replicas: 1
# 重启策略
# restartPolicy: Always

image:
  # 默认取chartName
  name: nginx
  # 默认取全局repository
  repository: 
  tag: latest
  # pullPolicy: IfNotPresent

# 自动更新镜像，需要安装k8s-image-updater: https://github.com/monlor/k8s-image-updater
kiu:
  enabled: false
  # Image update mode: digest, release or latest
  mode: latest
  # # Container name to update, if not set, update all containers
  # container: xxx
  # # Registry authentication secret name
  # secret: xxx

# 自动备份local-path的pvc: https://github.com/monlor/local-pvc-backup
lpb:
  enabled: false
  # include: 
  # exclude: 

# 自动获取镜像更新通知，需要安装diun: https://github.com/monlor/helm-charts/tree/main/charts/diun
diun:
  enabled: false
  # regopt: ""  # Replace with your registry options name if needed
  # watch_repo: false
  # notify_on: "new;update"
  # # reverse: latest first, semver: release vx.x.x first
  # sort_tags: reverse
  # max_tags: 0
  # include_tags: ""
  # exclude_tags: ""
  # hub_link: automatic
  # platform: ""

# 更新策略配置
# 对于 Deployment:
strategy:
  type: RollingUpdate
#   rollingUpdate:
#     maxSurge: 25%
#     maxUnavailable: 25%
# 
# 对于 DaemonSet:
# strategy:
#   type: RollingUpdate
#   rollingUpdate:
#     maxUnavailable: 1
#
# 对于 StatefulSet:
# strategy:
#   type: RollingUpdate
#   rollingUpdate:
#     partition: 0

# 将service环境变量注入到容器中，启动后部分服务出现异常
enableServiceLinks: false
  
# imagePullSecrets:
  # - name: aliyun
  #   url: registry.cn-hangzhou.aliyuncs.com
  #   username: xxxx
  #   password: xxxx

# 环境变量配置，value支持模板
# env: 
#   XXXX: aaaa

# 存在data这会自动创建配置，否则仅引用
# config:
#   - name: redis-cluster-default
#     type: ConfigMap
#     data:
#       - key: test
#         value: aaa
#   - name: service-config
#     type: Secret
#     attach: env
#     data:
#         # 日志服务ali uid
#       - key: ALI_UID
#         value: 
#         # arms的license key
#       - key: ARMS_LICENSE_KEY
#         value:
#         # 环境标识
#       - key: ENVNAME
#         value: dev
#   - name: redis-config
#     type: ConfigMap
#     attach: file
#     mountPath: /etc/redis
#     data:
#       - key: redis.conf
#         value: aaa
#   - name: rclone-config
#     type: ConfigMap
#     attach: none
#     mountPath: /etc/rclone
#     data:
#       - key: redis.conf
#         value: aaa

# 如果name为空，type为ClusterIP时，选择自定义集群端口映射。否则自动创建集群端口映射
# service:
#   - type: NodePort
#     ports:
#       - name: server
#         port: 9083
#         targetPort: 9083
#         protocol: TCP
#         # nodePort: 
#     selector:
#       aaa: bbb

# ports: 
#   - name: server
#     containerPort: 9083
#     protocol: TCP

health:
  enabled: true
  liveness:
    enabled: true
    mode: tcp
    # path: /xx # http
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  readiness:
    enabled: true
    mode: tcp
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  startup:
    enabled: true
    mode: tcp
    failureThreshold: 15
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3

resources: 
  limits:
    cpu: 300m
    memory: 512Mi
    ephemeral-storage: "500Mi"
  requests:
    cpu: 1m
    memory: 32Mi
    ephemeral-storage: "20Mi"

# lifecycle:

# command:
# args:

# 只有emptyDir和hostPath支持mountPropagation
# volumes:
#   - name: share-path
#     mountPath: /home/app/sharedFileData
#     subPath: share-data
#     persistentVolume: 
#       # create 为true时，创建的pvc自动在前面拼接helm的名称，如果为false则不拼接
#       create: true
#       # 卸载helm时是否保留pvc，true为保留
#       retain: false
#       accessModes: ReadWriteMany
#       storageSize: 10Gi
#   - name: test
#     mountPath: /shared
#     mountPropagation: HostToContainer
#     emptyDir: {}
#   - name: data
#     mountPath: /home/app/sharedFileData
#     mountPropagation: Bidirectional
#     hostPath: 
#       path: /home/admin
#       # DirectoryOrCreate Directory File FileOrCreate Socket CharDevice BlockDevice
#       type: DirectoryOrCreate
#   - name: config
#     mountPath: /opt/rabbitmq#     readOnly: true
#     configMap:
#       name: rabbitmq-config
#       items:
#       - key: rabbitmq.conf
#         path: rabbitmq.conf

# initContainers: []

# sidecars: []

# cloudflare tunnel
# https://github.com/adyanth/cloudflare-operator
tunnel:
  enabled: false
  hostname: xxx.monlor.com
  # tunnel ref name
  ref: monlor-com
  disableDNSUpdates: false
  noTlsVerify: false
  target: 
  protocol: 
  
ingress:
  enabled: false
  # className: traefik
  # clusterIssuer: cloudflare
  # cloudflareOnly: false
  # hosts:
  # - host: example.com

hooks:
  enabled: false
  data:
    - name: run-after
      hook: post-upgrade
      weight: 5
      deletePolicy: before-hook-creation
      image: xxxx:v0.0.1
      env:
        - name: "XXXX"
          value: "false"
      config:
        - name: service-config
          type: ConfigMap
          optional: true
        - name: service-secret
          type: Secret
          optional: true
    - name: run-before
      hook: pre-upgrade
      weight: 5
      deletePolicy: before-hook-creation
      image: xxxx:v0.0.1
      env:
        - name: "XXXX"
          value: "true"
      config:
        - name: service-config
          type: ConfigMap
          optional: true
        - name: service-secret
          type: Secret
          optional: true
        
# ServiceAccount配置
serviceAccount:
  # 是否创建ServiceAccount
  create: false
  # ServiceAccount名称，为空则使用release name
  # name: "{{ $.Release.Name }}"
  # 是否自动挂载token
  automountServiceAccountToken: true
  # Role配置，可以配置多个Role或ClusterRole
  roles:
    # - name: pod-reader # Role名称，为空则使用 release-name-role
    #   cluster: false   # 是否是ClusterRole
    #   rules:          # Role的规则配置
    #     - apiGroups: [""]
    #       resources: ["pods"]
    #       verbs: ["get", "list", "watch"]
    # - name: node-reader
    #   cluster: true    # 这是一个ClusterRole
    #   rules:
    #     - apiGroups: [""]
    #       resources: ["nodes"]
    #       verbs: ["get", "list"]
