# 纯数字需要打引号！！！
# 全局配置中的中间件配置可以配外部服务
global:
  repository: 
  # imagePullSecrets:
  #   - name: aliyun
  storageClassName: 

# 端口，健康检查默认端口
port: 80
extraPort:
  - port: 8080
    protocol: TCP
# 节点数
replicas: 1
# 重启策略
# restartPolicy: Always
# 资源类型 Deployment 或 StatefulSet
resourceType: Deployment

image:
  # 默认取chartName
  name: nginx
  # 默认取全局repository
  repository: 
  tag: latest
  # pullPolicy: IfNotPresent

kiu:
  enabled: true
  # Image update mode: digest, release or latest
  mode: latest
  # # Container name to update, if not set, update all containers
  # container: xxx
  # # Registry authentication secret name
  # secret: xxx
  
# imageSecrets:
  # - name: aliyun
  #   url: registry.cn-hangzhou.aliyuncs.com
  #   username: xxxx
  #   password: xxxx

# 环境变量配置，value支持模板
env: 
  XXXX: aaaa

# 存在data这会自动创建配置，否则仅引用
config:
  - name: redis-cluster-default
    type: ConfigMap
    attach: env
    data:
      - key: test
        value: aaa
  - name: service-config
    type: Secret
    attach: env
    data:
        # 日志服务ali uid
      - key: ALI_UID
        value: 
        # arms的license key
      - key: ARMS_LICENSE_KEY
        value:
        # 环境标识
      - key: ENVNAME
        value: dev
  - name: redis-config
    type: ConfigMap
    attach: file
    mountPath: /etc/redis
    data:
      - key: redis.conf
        value: aaa
  - name: redis-config2
    type: ConfigMap
    attach: file
    mountPath: /etc/redis
    data:
      - key: redis.conf
        value: aaa
      - key: redis2.conf
        value: aaa
  - name: rclone-config
    type: ConfigMap
    attach: none
    data:
      - key: rclone.conf
        value: aaa

enableServiceLinks: true

health:
  enabled: true
  liveness:
    enabled: true
    mode: tcp
    # path: /xx # http
    failureThreshold: 30
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 2
    timeoutSeconds: 3
  readiness:
    enabled: true
    mode: tcp
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 2
    timeoutSeconds: 3
  startup:
    enabled: true
    mode: http
    path: /ddd
    failureThreshold: 3
    initialDelaySeconds: 100
    periodSeconds: 5
    successThreshold: 2
    timeoutSeconds: 3

# 如果name为空，type为ClusterIP时，选择自定义集群端口映射。否则自动创建集群端口映射
service:
  - type: NodePort
    ports:
      - name: server
        port: 9083
        targetPort: 9083
        protocol: TCP
        # nodePort: 
    selector:
      aaa: bbb
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 600

sessionAffinity: ClientIP
sessionAffinityConfig:
  clientIP:
    timeoutSeconds: 6000

# ports: 
#   - name: server
#     containerPort: 9083
#     protocol: TCP

podAnnotations:
  test-annotions: aaa

podLabels:
  test-labels: bbb

resources: 
  limits:
    cpu: 2000m
    memory: 1024Mi
  requests:
    cpu: 500m
    memory: 128Mi

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 25%
    maxSurge: 25%

# lifecycle:

# command:
args:
  - -t
  - a

# 暂只支持pvc和配置映射
volumes:
  - name: share-path
    mountPath: /home/app/sharedFileData
    subPath: share-data
    persistentVolume: 
      create: true
      accessModes: ReadWriteMany
      storageSize: 10Gi
  - name: test
    mountPath: /shared
    mountPropagation: HostToContainer
    emptyDir: {}
  - name: shm
    mountPath: /dev/shm
    emptyDir: 
      medium: Memory
      sizeLimit: "1Gi"
  - name: data
    mountPath: /home/app/sharedFileData
    hostPath: 
      path: /home/admin
      # DirectoryOrCreate Directory File FileOrCreate Socket CharDevice BlockDevice
      type: DirectoryOrCreate
  - name: config
    mountPath: /opt/rabbitmq
    readOnly: true
    configMap:
      name: rabbitmq-config
      items:
      - key: rabbitmq.conf
        path: rabbitmq.conf

# initContainers: []

sidecars: 
  - name: rclone
    image: rclone/rclone:1.65
    command:
      - /usr/local/bin/rclone
    args:
      - '--config'
      - /etc/rclone/rclone.conf
      - mount
      - 'AllDrives:'
      - /shared_storage
      - '--umask'
      - '0000'
      - '--default-permissions'
      - '--allow-other'
      - '--allow-non-empty'
      - '--buffer-size'
      - 32M
      - '--dir-cache-time'
      - 12h
      - '--vfs-read-chunk-size'
      - 64M
      - '--vfs-read-chunk-size-limit'
      - 1G
    resources: {}
    volumeMounts:
      - name: shared-storage
        mountPath: /shared_storage
        mountPropagation: Bidirectional
      - name: rclone-config
        readOnly: true
        mountPath: /etc/rclone
    securityContext:
      privileged: true

# cloudflare tunnel
# https://github.com/adyanth/cloudflare-operator
tunnel:
  enabled: false
  hostname: xxx.monlor.com
  # tunnel ref name
  ref: monlor-com
  disableDNSUpdates: false
  noTlsVerify: false
  target: 
  protocol: 
  
ingress:
  enabled: true
  className: traefik
  cloudflareOnly: true
  clusterIssuer: cloudflare
  middlewares: kube-system2-cloudflare@kubernetescrd
  hosts:
  - host: monlor.com
    paths:
    - service: app2
      path: /web
      port: 9022
  - host: www.monlor.com
    paths:
    - path: /sss
    - service: sss
      path: /xxx 
      port: 333
  - host: emby.monlor.com
    service: aaa
    path: /ddd
    port: 3444
    paths:
    - path: /cccc

hooks:
  enabled: false
  data:
    - name: run-after
      hook: post-upgrade
      weight: 5
      deletePolicy: before-hook-creation
      image: xxxx:v0.0.1
      env:
        - name: "XXXX"
          value: "false"
      config:
        - name: service-config
          type: ConfigMap
          optional: true
        - name: service-secret
          type: Secret
          optional: true
    - name: run-before
      hook: pre-upgrade
      weight: 5
      deletePolicy: before-hook-creation
      image: xxxx:v0.0.1
      env:
        - name: "XXXX"
          value: "true"
      config:
        - name: service-config
          type: ConfigMap
          optional: true
        - name: service-secret
          type: Secret
          optional: true
        
# ServiceAccount配置
serviceAccount:
  # 是否创建ServiceAccount
  create: true
  # ServiceAccount名称，为空则使用release name
  # name: ""
  # 是否自动挂载token
  # automountServiceAccountToken: true
  # Role配置，可以配置多个Role或ClusterRole
  roles:
    - name: pod-reader # Role名称，为空则使用 release-name-role
      cluster: false   # 是否是ClusterRole
      rules:          # Role的规则配置
        - apiGroups: [""]
          resources: ["pods"]
          verbs: ["get", "list", "watch"]
    - name: node-reader
      cluster: true    # 这是一个ClusterRole
      rules:
        - apiGroups: [""]
          resources: ["nodes"]
          verbs: ["get", "list"]